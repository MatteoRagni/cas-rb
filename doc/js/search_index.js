var search_data = {"index":{"searchIndex":["alpha","cas","abs","acos","asin","atan","binaryop","caserror","condition","constant","cos","diff","div","e_constant","equal","exp","greater","greaterequal","help","infinity_constant","invert","ln","minus_one_constant","naryop","one_constant","op","pi_constant","piecewise","pow","prod","sin","smaller","smallerequal","sqrt","sum","two_constant","tan","variable","zero_constant","sandbox","sqrttest","testconstant","testdiff","testdiv","testprod","testsum","testvariable","!=()","!=()","*()","**()","+()","-()","-@()","/()","==()","==()","==()","==()","==()","==()","==()","==()","==()","abs()","acos()","args()","args()","args()","args()","args()","as_proc()","asin()","assert()","atan()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","const()","const()","cos()","create_method()","depend?()","depend?()","depend?()","depend?()","depend?()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","dot_graph()","dot_graph()","dot_graph()","dot_graph()","dot_graph()","dot_graph()","equal()","equal()","exist?()","exp()","export_dot()","greater()","greater()","greater_equal()","greater_equal()","inspect()","inspect()","inspect()","inspect()","inspect()","invert()","list()","ln()","log()","max()","min()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","pow()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","simplify()","sin()","size()","smaller()","smaller()","smaller_equal()","smaller_equal()","sqrt()","subs()","subs()","subs()","subs()","subs()","tan()","test_call()","test_call()","test_diff()","test_diff()","test_diff()","test_diff()","test_diff()","test_diff()","test_exist?()","test_init()","test_init()","test_init()","test_init()","test_init()","test_init()","test_init()","test_initialize()","test_inspect()","test_inspect()","test_simplify()","test_subs()","test_subs()","test_subs()","test_subs()","test_to_code()","test_to_code()","test_to_code()","test_to_code()","test_to_code()","test_to_s()","test_to_s()","test_to_s()","test_to_s()","test_to_s()","test_to_s()","test_typicalconst()","test_vars()","text_list()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_code()","to_dot()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_latex()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","vars()","vars()","changelog","readme","matteoragni.pem","ragni-cas.gemspec"],"longSearchIndex":["alpha","cas","cas::abs","cas::acos","cas::asin","cas::atan","cas::binaryop","cas::caserror","cas::condition","cas::constant","cas::cos","cas::diff","cas::div","cas::e_constant","cas::equal","cas::exp","cas::greater","cas::greaterequal","cas::help","cas::infinity_constant","cas::invert","cas::ln","cas::minus_one_constant","cas::naryop","cas::one_constant","cas::op","cas::pi_constant","cas::piecewise","cas::pow","cas::prod","cas::sin","cas::smaller","cas::smallerequal","cas::sqrt","cas::sum","cas::two_constant","cas::tan","cas::variable","cas::zero_constant","sandbox","sqrttest","testconstant","testdiff","testdiv","testprod","testsum","testvariable","cas::condition#!=()","cas::op#!=()","cas::op#*()","cas::op#**()","cas::op#+()","cas::op#-()","cas::op#-@()","cas::op#/()","cas::binaryop#==()","cas::condition#==()","cas::constant#==()","cas::diff#==()","cas::op#==()","cas::piecewise#==()","cas::prod#==()","cas::sum#==()","cas::variable#==()","cas::abs()","cas::acos()","cas::binaryop#args()","cas::condition#args()","cas::constant#args()","cas::op#args()","cas::variable#args()","cas::op#as_proc()","cas::asin()","cas::help::assert()","cas::atan()","cas::abs#call()","cas::acos#call()","cas::asin#call()","cas::atan#call()","cas::binaryop#call()","cas::constant#call()","cas::cos#call()","cas::diff#call()","cas::div#call()","cas::exp#call()","cas::invert#call()","cas::ln#call()","cas::op#call()","cas::piecewise#call()","cas::pow#call()","cas::prod#call()","cas::sin#call()","cas::sqrt#call()","cas::sum#call()","cas::tan#call()","cas::variable#call()","cas::const()","sandbox#const()","cas::cos()","alpha#create_method()","cas::binaryop#depend?()","cas::condition#depend?()","cas::constant#depend?()","cas::op#depend?()","cas::variable#depend?()","cas::abs#diff()","cas::acos#diff()","cas::asin#diff()","cas::atan#diff()","cas::binaryop#diff()","cas::condition#diff()","cas::constant#diff()","cas::cos#diff()","cas::diff#diff()","cas::div#diff()","cas::exp#diff()","cas::invert#diff()","cas::ln#diff()","cas::op#diff()","cas::piecewise#diff()","cas::pow#diff()","cas::prod#diff()","cas::sin#diff()","cas::sqrt#diff()","cas::sum#diff()","cas::tan#diff()","cas::variable#diff()","cas::binaryop#dot_graph()","cas::condition#dot_graph()","cas::constant#dot_graph()","cas::op#dot_graph()","cas::piecewise#dot_graph()","cas::variable#dot_graph()","cas::equal()","cas::op#equal()","cas::variable::exist?()","cas::exp()","cas::export_dot()","cas::greater()","cas::op#greater()","cas::greater_equal()","cas::op#greater_equal()","cas::binaryop#inspect()","cas::condition#inspect()","cas::constant#inspect()","cas::op#inspect()","cas::variable#inspect()","cas::invert()","cas::variable::list()","cas::ln()","cas::log()","cas::max()","cas::min()","alpha::new()","cas::binaryop::new()","cas::condition::new()","cas::constant::new()","cas::e_constant::new()","cas::equal::new()","cas::greater::new()","cas::greaterequal::new()","cas::infinity_constant::new()","cas::minus_one_constant::new()","cas::one_constant::new()","cas::op::new()","cas::pi_constant::new()","cas::piecewise::new()","cas::smaller::new()","cas::smallerequal::new()","cas::two_constant::new()","cas::variable::new()","cas::zero_constant::new()","cas::pow()","cas::abs#simplify()","cas::acos#simplify()","cas::asin#simplify()","cas::atan#simplify()","cas::binaryop#simplify()","cas::condition#simplify()","cas::constant#simplify()","cas::cos#simplify()","cas::diff#simplify()","cas::div#simplify()","cas::exp#simplify()","cas::invert#simplify()","cas::ln#simplify()","cas::op#simplify()","cas::pow#simplify()","cas::prod#simplify()","cas::sin#simplify()","cas::sqrt#simplify()","cas::sum#simplify()","cas::tan#simplify()","cas::variable#simplify()","cas::sin()","cas::variable::size()","cas::smaller()","cas::op#smaller()","cas::smaller_equal()","cas::op#smaller_equal()","cas::sqrt()","cas::binaryop#subs()","cas::condition#subs()","cas::constant#subs()","cas::op#subs()","cas::variable#subs()","cas::tan()","testdiv#test_call()","testvariable#test_call()","testconstant#test_diff()","testdiff#test_diff()","testdiv#test_diff()","testprod#test_diff()","testsum#test_diff()","testvariable#test_diff()","testvariable#test_exist?()","sqrttest#test_init()","testconstant#test_init()","testdiff#test_init()","testdiv#test_init()","testprod#test_init()","testsum#test_init()","testvariable#test_init()","testconstant#test_initialize()","testconstant#test_inspect()","testvariable#test_inspect()","testvariable#test_simplify()","testdiff#test_subs()","testdiv#test_subs()","testprod#test_subs()","testsum#test_subs()","sqrttest#test_to_code()","testdiff#test_to_code()","testdiv#test_to_code()","testprod#test_to_code()","testsum#test_to_code()","testconstant#test_to_s()","testdiff#test_to_s()","testdiv#test_to_s()","testprod#test_to_s()","testsum#test_to_s()","testvariable#test_to_s()","testconstant#test_typicalconst()","testvariable#test_vars()","testvariable#text_list()","cas::abs#to_code()","cas::acos#to_code()","cas::asin#to_code()","cas::atan#to_code()","cas::binaryop#to_code()","cas::condition#to_code()","cas::cos#to_code()","cas::diff#to_code()","cas::div#to_code()","cas::exp#to_code()","cas::invert#to_code()","cas::ln#to_code()","cas::op#to_code()","cas::piecewise#to_code()","cas::pow#to_code()","cas::prod#to_code()","cas::sin#to_code()","cas::sqrt#to_code()","cas::sum#to_code()","cas::tan#to_code()","cas::variable#to_code()","cas::to_dot()","cas::abs#to_latex()","cas::acos#to_latex()","cas::asin#to_latex()","cas::atan#to_latex()","cas::binaryop#to_latex()","cas::constant#to_latex()","cas::cos#to_latex()","cas::diff#to_latex()","cas::div#to_latex()","cas::e_constant#to_latex()","cas::equal#to_latex()","cas::exp#to_latex()","cas::greater#to_latex()","cas::greaterequal#to_latex()","cas::infinity_constant#to_latex()","cas::invert#to_latex()","cas::ln#to_latex()","cas::op#to_latex()","cas::pi_constant#to_latex()","cas::piecewise#to_latex()","cas::pow#to_latex()","cas::prod#to_latex()","cas::sin#to_latex()","cas::smaller#to_latex()","cas::smallerequal#to_latex()","cas::sqrt#to_latex()","cas::sum#to_latex()","cas::tan#to_latex()","cas::variable#to_latex()","cas::abs#to_s()","cas::acos#to_s()","cas::asin#to_s()","cas::atan#to_s()","cas::binaryop#to_s()","cas::condition#to_s()","cas::constant#to_s()","cas::cos#to_s()","cas::diff#to_s()","cas::div#to_s()","cas::e_constant#to_s()","cas::exp#to_s()","cas::infinity_constant#to_s()","cas::invert#to_s()","cas::ln#to_s()","cas::minus_one_constant#to_s()","cas::one_constant#to_s()","cas::op#to_s()","cas::pi_constant#to_s()","cas::piecewise#to_s()","cas::pow#to_s()","cas::prod#to_s()","cas::sin#to_s()","cas::sqrt#to_s()","cas::sum#to_s()","cas::two_constant#to_s()","cas::tan#to_s()","cas::variable#to_s()","cas::zero_constant#to_s()","cas::vars()","sandbox#vars()","","","",""],"info":[["Alpha","","Alpha.html","",""],["CAS","","CAS.html","",""],["CAS::Abs","","CAS/Abs.html","","\n<pre>  _   _\n /_\\ | |__ ___\n/ _ \\| &#39;_ (_-&lt;</pre>\n<p>/_/ _<em>._</em>/__/\n"],["CAS::Acos","","CAS/Acos.html","","\n<pre>  _\n /_\\  __ ___ ___\n/ _ \\/ _/ _ (_-&lt;</pre>\n<p>/_/ _<em>_/</em>/\n"],["CAS::Asin","","CAS/Asin.html","","\n<pre>  _       _\n /_\\   __(_)_ _\n/ _ \\ (_-&lt; | &#39; \\</pre>\n<p>/_/ _/<em>_/</em>|_||_|\n"],["CAS::Atan","","CAS/Atan.html","","\n<pre>  _  _\n /_\\| |_ __ _ _ _\n/ _ \\  _/ _` | &#39; \\</pre>\n<p>/_/ _<em>_</em>_,_|_||_|\n"],["CAS::BinaryOp","","CAS/BinaryOp.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span> <span class=\"ruby-identifier\">_</span>                     <span class=\"ruby-identifier\">___</span>\n</pre>\n<p>| _ |_)_ _  __ _ _ _ _  _ / _ \\ _ __ | _ \\ | &#39; / _` | &#39;_| || | (_)\n…\n"],["CAS::CASError","","CAS/CASError.html","",""],["CAS::Condition","","CAS/Condition.html","",""],["CAS::Constant","","CAS/Constant.html","","\n<pre> ___             _            _\n/ __|___ _ _  __| |_ __ _ _ _| |_</pre>\n<p>| (__/ _ \\ &#39; (_-&lt;  _/ _` | &#39; …\n"],["CAS::Cos","","CAS/Cos.html","","\n<pre> ___\n/ __|___ ___</pre>\n<p>| (__/ _ (_-&lt;\n\n<pre>\\___\\___/__/</pre>\n"],["CAS::Diff","","CAS/Diff.html","","<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>  <span class=\"ruby-identifier\">_</span>  <span class=\"ruby-identifier\">__</span>  <span class=\"ruby-identifier\">__</span>\n</pre>\n<p>|   (_)/ _|/ _| | |) | |  _|  _/ |<em>_</em>/|_|_| |_| “`\n"],["CAS::Div","","CAS/Div.html","","<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>  <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>|   (_)_ __ | |) | \\ V / |<em>_</em>/|_|_/ “`\n"],["CAS::E_CONSTANT","","CAS/E_CONSTANT.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>\n</pre>\n<p>| __| | _| |<em>_</em>|\n"],["CAS::Equal","","CAS/Equal.html","",""],["CAS::Exp","","CAS/Exp.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>                            <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>| <em>_|</em> <em>_</em> __  <em>_</em> _ _  <em>_</em> _ _| |_ | _|\\ \\ /\n&#39;_ / _ \\ &#39; / -_) &#39; …\n"],["CAS::Greater","","CAS/Greater.html","",""],["CAS::GreaterEqual","","CAS/GreaterEqual.html","",""],["CAS::Help","","CAS/Help.html","","<p>Support functions are in this separate Helper class\n"],["CAS::INFINITY_CONSTANT","","CAS/INFINITY_CONSTANT.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>       <span class=\"ruby-identifier\">__</span> <span class=\"ruby-identifier\">_</span>      <span class=\"ruby-identifier\">_</span> <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>|_ _|_ _  / _(_)_ _ (_) |_ _  _\n\n<pre>| || &#39; \\|  _| | &#39; \\| |  _| || |</pre>\n"],["CAS::Invert","","CAS/Invert.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>                 <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>|_ _|_ <em>_</em> <em>_</em> _ _| |_\n\n<pre>| || &#39; \\ V / -_) &#39;_|  _|</pre>\n"],["CAS::Ln","","CAS/Ln.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_</span>                       <span class=\"ruby-identifier\">_</span> <span class=\"ruby-identifier\">_</span>   <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>| |   <em>_</em>  __ _ __ _ _ _(_) |_| |_  _ __ | |__/ _ / _` / _` |\n&#39;_| | …\n"],["CAS::MINUS_ONE_CONSTANT","","CAS/MINUS_ONE_CONSTANT.html","","\n<pre>    _\n___/ |</pre>\n<p>|<em>_</em>| |\n\n<pre>|_|</pre>\n"],["CAS::NaryOp","","CAS/NaryOp.html","","<p>This is an attempt to build some sort of node in the graph that  has\narbitrary number of node. It should …\n"],["CAS::ONE_CONSTANT","","CAS/ONE_CONSTANT.html","","\n<pre> ___\n/ _ \\ _ _  ___</pre>\n<p>| (_) | &#39; / -_)\n\n<pre>\\___/|_||_\\___|</pre>\n"],["CAS::Op","","CAS/Op.html","","\n<pre> ___\n/ _ \\ _ __</pre>\n<p>| (_) | &#39;_ \\\n\n<pre>\\___/| .__/\n     |_|</pre>\n"],["CAS::PI_CONSTANT","","CAS/PI_CONSTANT.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span> <span class=\"ruby-identifier\">___</span>\n</pre>\n<p>| _ _ _| |  _/| | |_| |<em>_</em>|\n"],["CAS::Piecewise","","CAS/Piecewise.html","",""],["CAS::Pow","","CAS/Pow.html","","<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>\n</pre>\n<p>| _ _<em>__</em> __ __ |  _/ _ \\ V  V / |_| _<em>_/</em>/_/ “`\n"],["CAS::Prod","","CAS/Prod.html","","<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>             <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>| _ _ _ <em>_</em>  __| | |  _/ &#39;_/ _ / _` | |_| |_| _<em>_/</em>_,_|\n“`\n"],["CAS::Sin","","CAS/Sin.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span> <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>/ <em>_(</em>)_ _ __ \\ | &#39; \\ |<em>_</em>/_|_||_|\n"],["CAS::Smaller","","CAS/Smaller.html","",""],["CAS::SmallerEqual","","CAS/SmallerEqual.html","",""],["CAS::Sqrt","","CAS/Sqrt.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>           <span class=\"ruby-identifier\">_</span>\n</pre>\n<p>/ __| __ _ _ _| |_ __ / _` | &#39;_|  _| |<em>_</em>/__, |_|  __|\n\n<pre>|_|</pre>\n"],["CAS::Sum","","CAS/Sum.html","","<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">___</span>\n</pre>\n<p>/ <em>_|</em>  _ _ __ __ \\ || | &#39;  \\ |<em>_</em>/_,_|_|_|_| “`\n"],["CAS::TWO_CONSTANT","","CAS/TWO_CONSTANT.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_____</span>\n</pre>\n<p>|_   _|_ __ <em>_</em>\n\n<pre>| | \\ V  V / _ \\\n|_|  \\_/\\_/\\___/</pre>\n"],["CAS::Tan","","CAS/Tan.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_____</span>\n</pre>\n<p>|_   _|_ _ _ _\n\n<pre>| |/ _` | &#39; \\\n|_|\\__,_|_||_|</pre>\n"],["CAS::Variable","","CAS/Variable.html","","<p>__   __        _      _    _ \\ \\ / /_ _ _ _(_)__ _| |__| |<em>_</em>\n\n<pre>\\ V / _` | &#39;_| / _` | &#39;_ \\ / -_)\n \\_/\\__,_|_| ...</pre>\n"],["CAS::ZERO_CONSTANT","","CAS/ZERO_CONSTANT.html","","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_______</span> <span class=\"ruby-identifier\">___</span>  <span class=\"ruby-identifier\">___</span>\n</pre>\n<p>|_  / __| _ / _ \\\n\n<pre>/ /| _||   / (_) |</pre>\n"],["SandBox","","SandBox.html","","<p>Spawns a web server for my smbolic computations. Each class is expanded \nwith a new to_latex method\n"],["SqrtTest","","SqrtTest.html","",""],["TestConstant","","TestConstant.html","",""],["TestDiff","","TestDiff.html","",""],["TestDiv","","TestDiv.html","",""],["TestProd","","TestProd.html","",""],["TestSum","","TestSum.html","",""],["TestVariable","","TestVariable.html","",""],["!=","CAS::Condition","CAS/Condition.html#method-i-21-3D","(op)",""],["!=","CAS::Op","CAS/Op.html#method-i-21-3D","(op)","<p>Disequality operator, the standard operator is overloaded :warning: this\noperates on the graph, not on …\n"],["*","CAS::Op","CAS/Op.html#method-i-2A","(op)","<p>Returns a product of two `CAS::Op`s\n<p>&lt;- `CAS::Op` tree -&gt; `CAS::Op` new object\n"],["**","CAS::Op","CAS/Op.html#method-i-2A-2A","(op)","<p>Returns the power of two `CAS::Op`s\n<p>&lt;- `CAS::Op` tree -&gt; `CAS::Op` new object\n"],["+","CAS::Op","CAS/Op.html#method-i-2B","(op)","<p>Returns a sum of two `CAS::Op`s\n<p>&lt;- `CAS::Op` tree -&gt; `CAS::Op` new object\n"],["-","CAS::Op","CAS/Op.html#method-i-2D","(op)","<p>Returns a difference of two `CAS::Op`s\n<p>&lt;- `CAS::Op` tree -&gt; `CAS::Op` new object\n"],["-@","CAS::Op","CAS/Op.html#method-i-2D-40","()","<p>Unary operator for inversion of a `CAS::Op`\n<p>-&gt; `CAS::Op` new object\n"],["/","CAS::Op","CAS/Op.html#method-i-2F","(op)","<p>Returns a division of two `CAS::Op`s\n<p>&lt;- `CAS::Op` tree -&gt; `CAS::Op` new object\n"],["==","CAS::BinaryOp","CAS/BinaryOp.html#method-i-3D-3D","(op)","<p>Comparison with other `CAS::Op`. This is *<strong>not</strong>* a math\noperation.\n<p>&lt;- `CAS::Op` to be compared against …\n"],["==","CAS::Condition","CAS/Condition.html#method-i-3D-3D","(op)",""],["==","CAS::Constant","CAS/Constant.html#method-i-3D-3D","(op)","<p>Same as `CAS::Op`\n"],["==","CAS::Diff","CAS/Diff.html#method-i-3D-3D","(op)","<p>Same as `CAS::Op`\n"],["==","CAS::Op","CAS/Op.html#method-i-3D-3D","(op)","<p>Equality operator, the standard operator is overloaded :warning: this\noperates on the graph, not on the …\n"],["==","CAS::Piecewise","CAS/Piecewise.html#method-i-3D-3D","(op)",""],["==","CAS::Prod","CAS/Prod.html#method-i-3D-3D","(op)","<p>Same as `CAS::Op`\n"],["==","CAS::Sum","CAS/Sum.html#method-i-3D-3D","(op)","<p>Same as `CAS::Op`\n"],["==","CAS::Variable","CAS/Variable.html#method-i-3D-3D","(op)","<p>Same as `CAS::Op`\n"],["abs","CAS","CAS.html#method-c-abs","(x)",""],["acos","CAS","CAS.html#method-c-acos","(x)",""],["args","CAS::BinaryOp","CAS/BinaryOp.html#method-i-args","()","<p>Returns an array of all the variables that are in the graph\n<p>-&gt; `Array` of `CAS::Variable`s\n"],["args","CAS::Condition","CAS/Condition.html#method-i-args","()",""],["args","CAS::Constant","CAS/Constant.html#method-i-args","()","<p>Same as `CAS::Op`\n"],["args","CAS::Op","CAS/Op.html#method-i-args","()","<p>Returns a list of all `CAS::Variable`s of the current tree\n<p>-&gt; `Array` of `CAS::Variable`s\n"],["args","CAS::Variable","CAS/Variable.html#method-i-args","()","<p>Same as `CAS::Op`\n"],["as_proc","CAS::Op","CAS/Op.html#method-i-as_proc","(bind=nil)","<p>Evaluates the proc against a given context. It is like having a snapshot of\nthe tree transformed in a …\n"],["asin","CAS","CAS.html#method-c-asin","(x)",""],["assert","CAS::Help","CAS/Help.html#method-c-assert","(obj, type)","<p>Check input `obj.class` against a `type` class raises an ArgumentError if\ncheck fails\n"],["atan","CAS","CAS.html#method-c-atan","(x)",""],["call","CAS::Abs","CAS/Abs.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Acos","CAS/Acos.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Asin","CAS/Asin.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Atan","CAS/Atan.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::BinaryOp","CAS/BinaryOp.html#method-i-call","(fd)","<p>Same `CAS::Op#call`\n<p>&lt;- `Hash` of values -&gt; `Numeric` for result\n"],["call","CAS::Constant","CAS/Constant.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Cos","CAS/Cos.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Diff","CAS/Diff.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Div","CAS/Div.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Exp","CAS/Exp.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Invert","CAS/Invert.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Ln","CAS/Ln.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Op","CAS/Op.html#method-i-call","(f)","<p>Call resolves the operation tree in a `Numeric` (if `Fixnum`) or `Float`\ndepends upon promotions). As …\n"],["call","CAS::Piecewise","CAS/Piecewise.html#method-i-call","(fd)",""],["call","CAS::Pow","CAS/Pow.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Prod","CAS/Prod.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Sin","CAS/Sin.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Sqrt","CAS/Sqrt.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Sum","CAS/Sum.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Tan","CAS/Tan.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["call","CAS::Variable","CAS/Variable.html#method-i-call","(f)","<p>Same as `CAS::Op`\n"],["const","CAS","CAS.html#method-c-const","(*val)","<p>Allows to define a series of new constants.\n<p>“` ruby a, b = CAS::const 1.0, 100 “`\n<p>&lt;- `Array` of Numeric …\n"],["const","SandBox","SandBox.html#method-i-const","(args)",""],["cos","CAS","CAS.html#method-c-cos","(x)",""],["create_method","Alpha","Alpha.html#method-i-create_method","(name, block)",""],["depend?","CAS::BinaryOp","CAS/BinaryOp.html#method-i-depend-3F","(v)","<p>Same as `CAS::Op#depend?`\n"],["depend?","CAS::Condition","CAS/Condition.html#method-i-depend-3F","(v)",""],["depend?","CAS::Constant","CAS/Constant.html#method-i-depend-3F","(v)","<p>Same as `CAS::Op`\n"],["depend?","CAS::Op","CAS/Op.html#method-i-depend-3F","(v)","<p>Return the dependencies of the operation. Requires a `CAS::Variable` and it\nis one of the recursve method …\n"],["depend?","CAS::Variable","CAS/Variable.html#method-i-depend-3F","(v)","<p>Same as `CAS::Op`\n"],["diff","CAS::Abs","CAS/Abs.html#method-i-diff","(v)","<p>Performs the absolute value of a `CAS::Op`\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Acos","CAS/Acos.html#method-i-diff","(v)",""],["diff","CAS::Asin","CAS/Asin.html#method-i-diff","(v)",""],["diff","CAS::Atan","CAS/Atan.html#method-i-diff","(v)",""],["diff","CAS::BinaryOp","CAS/BinaryOp.html#method-i-diff","(v)","<p>This method returns an array with the derivatives of the two branches of\nthe node. This method is usually …\n"],["diff","CAS::Condition","CAS/Condition.html#method-i-diff","(v)",""],["diff","CAS::Constant","CAS/Constant.html#method-i-diff","(v)","<p>The derivative of a constant is always zero\n"],["diff","CAS::Cos","CAS/Cos.html#method-i-diff","(v)",""],["diff","CAS::Diff","CAS/Diff.html#method-i-diff","(v)","<p>Performs the difference between two `CAS::Op`s\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Div","CAS/Div.html#method-i-diff","(v)","<p>Performs the division between two `CAS::Op`\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Exp","CAS/Exp.html#method-i-diff","(v)",""],["diff","CAS::Invert","CAS/Invert.html#method-i-diff","(v)","<p>Performs the inversion of a `CAS::Op`\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Ln","CAS/Ln.html#method-i-diff","(v)",""],["diff","CAS::Op","CAS/Op.html#method-i-diff","(v)","<p>Return the derivative of the operation using the chain rule The input is a\n`CAS::Op` because it can handle …\n"],["diff","CAS::Piecewise","CAS/Piecewise.html#method-i-diff","(v)",""],["diff","CAS::Pow","CAS/Pow.html#method-i-diff","(v)","<p>Performs the power between two `CAS::Op`\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Prod","CAS/Prod.html#method-i-diff","(v)","<p>Performs the product between two `CAS::Op`\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Sin","CAS/Sin.html#method-i-diff","(v)",""],["diff","CAS::Sqrt","CAS/Sqrt.html#method-i-diff","(v)","<p>Performs the square root between two `CAS::Op`\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Sum","CAS/Sum.html#method-i-diff","(v)","<p>Performs the sum between two `CAS::Op`\n<p>“`\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span>\n</pre>\n"],["diff","CAS::Tan","CAS/Tan.html#method-i-diff","(v)",""],["diff","CAS::Variable","CAS/Variable.html#method-i-diff","(v)","<p>Returns the derivative of a variable\n<p>“`\n\n<pre>dx      dx\n-- = 1; -- = 0\ndx      dy</pre>\n"],["dot_graph","CAS::BinaryOp","CAS/BinaryOp.html#method-i-dot_graph","(node)","<p>Returns the graphviz representation of the current node\n<p>&lt;- `?` to be removed -&gt; `String`\n"],["dot_graph","CAS::Condition","CAS/Condition.html#method-i-dot_graph","(node)",""],["dot_graph","CAS::Constant","CAS/Constant.html#method-i-dot_graph","(node)","<p>Same as `CAS::Op`\n"],["dot_graph","CAS::Op","CAS/Op.html#method-i-dot_graph","(node)","<p>Return the local Graphviz node of the tree\n<p>&lt;- `?` unused variable (TODO: to be removed) -&gt; `String` …\n"],["dot_graph","CAS::Piecewise","CAS/Piecewise.html#method-i-dot_graph","(node)",""],["dot_graph","CAS::Variable","CAS/Variable.html#method-i-dot_graph","(node)","<p>Same as `CAS::Op`\n"],["equal","CAS","CAS.html#method-c-equal","(x, y)",""],["equal","CAS::Op","CAS/Op.html#method-i-equal","(v)",""],["exist?","CAS::Variable","CAS/Variable.html#method-c-exist-3F","(name)","<p>Returns `true` if a variable already exists\n<p>&lt;- `Object` that represent the variable -&gt; `TrueClass` …\n"],["exp","CAS","CAS.html#method-c-exp","(x)",""],["export_dot","CAS","CAS.html#method-c-export_dot","(fl, op)","<p>Export the input `CAS::Op` graphviz representation to a file. &lt;-\n`String` with filename &lt;- `CAS::Op` …\n"],["greater","CAS","CAS.html#method-c-greater","(x, y)",""],["greater","CAS::Op","CAS/Op.html#method-i-greater","(v)",""],["greater_equal","CAS","CAS.html#method-c-greater_equal","(x, y)",""],["greater_equal","CAS::Op","CAS/Op.html#method-i-greater_equal","(v)",""],["inspect","CAS::BinaryOp","CAS/BinaryOp.html#method-i-inspect","()","<p>Inspector\n<p>-&gt; `String`\n"],["inspect","CAS::Condition","CAS/Condition.html#method-i-inspect","()",""],["inspect","CAS::Constant","CAS/Constant.html#method-i-inspect","()","<p>Same as `CAS::Op`\n"],["inspect","CAS::Op","CAS/Op.html#method-i-inspect","()","<p>Inspector for the current object\n<p>-&gt; `String`\n"],["inspect","CAS::Variable","CAS/Variable.html#method-i-inspect","()","<p>Same as `CAS::Op`\n"],["invert","CAS","CAS.html#method-c-invert","(x)",""],["list","CAS::Variable","CAS/Variable.html#method-c-list","()","<p>Returns the `Hash` that contains all the variable\n<p>-&gt; `Hash`\n"],["ln","CAS","CAS.html#method-c-ln","(x)",""],["log","CAS","CAS.html#method-c-log","(x)",""],["max","CAS","CAS.html#method-c-max","(x, y)",""],["min","CAS","CAS.html#method-c-min","(x, y)",""],["new","Alpha","Alpha.html#method-c-new","(op, var)",""],["new","CAS::BinaryOp","CAS/BinaryOp.html#method-c-new","(x, y)","<p>The binary operator inherits from the `CAS::Op`, even if it is defined as a\nnode with two possible branches. …\n"],["new","CAS::Condition","CAS/Condition.html#method-c-new","(type, x, y)",""],["new","CAS::Constant","CAS/Constant.html#method-c-new","(x)",""],["new","CAS::E_CONSTANT","CAS/E_CONSTANT.html#method-c-new","()",""],["new","CAS::Equal","CAS/Equal.html#method-c-new","(x, y)",""],["new","CAS::Greater","CAS/Greater.html#method-c-new","(x, y)",""],["new","CAS::GreaterEqual","CAS/GreaterEqual.html#method-c-new","(x, y)",""],["new","CAS::INFINITY_CONSTANT","CAS/INFINITY_CONSTANT.html#method-c-new","()",""],["new","CAS::MINUS_ONE_CONSTANT","CAS/MINUS_ONE_CONSTANT.html#method-c-new","()",""],["new","CAS::ONE_CONSTANT","CAS/ONE_CONSTANT.html#method-c-new","()",""],["new","CAS::Op","CAS/Op.html#method-c-new","(x)","<p>Initialize a new empty operation container. This is a virtual class and the\nother must inherit from this …\n"],["new","CAS::PI_CONSTANT","CAS/PI_CONSTANT.html#method-c-new","()",""],["new","CAS::Piecewise","CAS/Piecewise.html#method-c-new","(x, y, condition)",""],["new","CAS::Smaller","CAS/Smaller.html#method-c-new","(x, y)",""],["new","CAS::SmallerEqual","CAS/SmallerEqual.html#method-c-new","(x, y)",""],["new","CAS::TWO_CONSTANT","CAS/TWO_CONSTANT.html#method-c-new","()",""],["new","CAS::Variable","CAS/Variable.html#method-c-new","(name)","<p>Variable is a container for an atomic simbol that becomes a number when\n`CAS::Op#call` method is used. …\n"],["new","CAS::ZERO_CONSTANT","CAS/ZERO_CONSTANT.html#method-c-new","()",""],["pow","CAS","CAS.html#method-c-pow","(x, y)",""],["simplify","CAS::Abs","CAS/Abs.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Acos","CAS/Acos.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Asin","CAS/Asin.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Atan","CAS/Atan.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::BinaryOp","CAS/BinaryOp.html#method-i-simplify","()","<p>Executes simplifications of the two branches of the graph\n<p>-&gt; `CAS::BinaryOp` as `self`\n"],["simplify","CAS::Condition","CAS/Condition.html#method-i-simplify","()",""],["simplify","CAS::Constant","CAS/Constant.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Cos","CAS/Cos.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Diff","CAS/Diff.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Div","CAS/Div.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Exp","CAS/Exp.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Invert","CAS/Invert.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Ln","CAS/Ln.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Op","CAS/Op.html#method-i-simplify","()","<p>Simplification callback. It simplify the subgraph of each node until all\npossible simplification are …\n"],["simplify","CAS::Pow","CAS/Pow.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Prod","CAS/Prod.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Sin","CAS/Sin.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Sqrt","CAS/Sqrt.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Sum","CAS/Sum.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Tan","CAS/Tan.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["simplify","CAS::Variable","CAS/Variable.html#method-i-simplify","()","<p>Same as `CAS::Op`\n"],["sin","CAS","CAS.html#method-c-sin","(x)",""],["size","CAS::Variable","CAS/Variable.html#method-c-size","()","<p>Return the number of variable defined\n<p>-&gt; `Fixnum`\n"],["smaller","CAS","CAS.html#method-c-smaller","(x, y)",""],["smaller","CAS::Op","CAS/Op.html#method-i-smaller","(v)",""],["smaller_equal","CAS","CAS.html#method-c-smaller_equal","(x, y)",""],["smaller_equal","CAS::Op","CAS/Op.html#method-i-smaller_equal","(v)",""],["sqrt","CAS","CAS.html#method-c-sqrt","(x)",""],["subs","CAS::BinaryOp","CAS/BinaryOp.html#method-i-subs","(dt)","<p>Substituitions for both branches of the graph, same as `CAS::Op#subs`\n<p>&lt;- `Hash` of substitutions -&gt; …\n"],["subs","CAS::Condition","CAS/Condition.html#method-i-subs","(fd)",""],["subs","CAS::Constant","CAS/Constant.html#method-i-subs","(dt)","<p>Subs for a constant is a dummy method\n"],["subs","CAS::Op","CAS/Op.html#method-i-subs","(dt)","<p>Perform substitution of a part of the graph using a data table:\n<p>“` ruby x, y = CAS::vars :x, :y f = (x …\n"],["subs","CAS::Variable","CAS/Variable.html#method-i-subs","(dt)","<p>Terminal substitutions for variables\n"],["tan","CAS","CAS.html#method-c-tan","(x)",""],["test_call","TestDiv","TestDiv.html#method-i-test_call","()",""],["test_call","TestVariable","TestVariable.html#method-i-test_call","()",""],["test_diff","TestConstant","TestConstant.html#method-i-test_diff","()",""],["test_diff","TestDiff","TestDiff.html#method-i-test_diff","()",""],["test_diff","TestDiv","TestDiv.html#method-i-test_diff","()",""],["test_diff","TestProd","TestProd.html#method-i-test_diff","()",""],["test_diff","TestSum","TestSum.html#method-i-test_diff","()",""],["test_diff","TestVariable","TestVariable.html#method-i-test_diff","()",""],["test_exist?","TestVariable","TestVariable.html#method-i-test_exist-3F","()",""],["test_init","SqrtTest","SqrtTest.html#method-i-test_init","()",""],["test_init","TestConstant","TestConstant.html#method-i-test_init","()",""],["test_init","TestDiff","TestDiff.html#method-i-test_init","()",""],["test_init","TestDiv","TestDiv.html#method-i-test_init","()",""],["test_init","TestProd","TestProd.html#method-i-test_init","()",""],["test_init","TestSum","TestSum.html#method-i-test_init","()",""],["test_init","TestVariable","TestVariable.html#method-i-test_init","()",""],["test_initialize","TestConstant","TestConstant.html#method-i-test_initialize","()",""],["test_inspect","TestConstant","TestConstant.html#method-i-test_inspect","()",""],["test_inspect","TestVariable","TestVariable.html#method-i-test_inspect","()",""],["test_simplify","TestVariable","TestVariable.html#method-i-test_simplify","()",""],["test_subs","TestDiff","TestDiff.html#method-i-test_subs","()",""],["test_subs","TestDiv","TestDiv.html#method-i-test_subs","()",""],["test_subs","TestProd","TestProd.html#method-i-test_subs","()",""],["test_subs","TestSum","TestSum.html#method-i-test_subs","()",""],["test_to_code","SqrtTest","SqrtTest.html#method-i-test_to_code","()",""],["test_to_code","TestDiff","TestDiff.html#method-i-test_to_code","()",""],["test_to_code","TestDiv","TestDiv.html#method-i-test_to_code","()",""],["test_to_code","TestProd","TestProd.html#method-i-test_to_code","()",""],["test_to_code","TestSum","TestSum.html#method-i-test_to_code","()",""],["test_to_s","TestConstant","TestConstant.html#method-i-test_to_s","()",""],["test_to_s","TestDiff","TestDiff.html#method-i-test_to_s","()",""],["test_to_s","TestDiv","TestDiv.html#method-i-test_to_s","()",""],["test_to_s","TestProd","TestProd.html#method-i-test_to_s","()",""],["test_to_s","TestSum","TestSum.html#method-i-test_to_s","()",""],["test_to_s","TestVariable","TestVariable.html#method-i-test_to_s","()",""],["test_typicalconst","TestConstant","TestConstant.html#method-i-test_typicalconst","()",""],["test_vars","TestVariable","TestVariable.html#method-i-test_vars","()",""],["text_list","TestVariable","TestVariable.html#method-i-text_list","()",""],["to_code","CAS::Abs","CAS/Abs.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Acos","CAS/Acos.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Asin","CAS/Asin.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Atan","CAS/Atan.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::BinaryOp","CAS/BinaryOp.html#method-i-to_code","()","<p>Code to be used in `CAS::BinaryOp#to_proc`\n<p>-&gt; `String`\n"],["to_code","CAS::Condition","CAS/Condition.html#method-i-to_code","()",""],["to_code","CAS::Cos","CAS/Cos.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Diff","CAS/Diff.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Div","CAS/Div.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Exp","CAS/Exp.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Invert","CAS/Invert.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Ln","CAS/Ln.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Op","CAS/Op.html#method-i-to_code","()","<p>Convert expression to code (internal, for `CAS::Op#to_proc` method)\n<p>-&gt; `String` that represent Ruby …\n"],["to_code","CAS::Piecewise","CAS/Piecewise.html#method-i-to_code","()",""],["to_code","CAS::Pow","CAS/Pow.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Prod","CAS/Prod.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Sin","CAS/Sin.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Sqrt","CAS/Sqrt.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Sum","CAS/Sum.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Tan","CAS/Tan.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_code","CAS::Variable","CAS/Variable.html#method-i-to_code","()","<p>Same as `CAS::Op`\n"],["to_dot","CAS","CAS.html#method-c-to_dot","(op)","<p>Return a string representation of the graph that is a Graphviz tree.\nRequires a `CAS::Op` as argument. …\n"],["to_latex","CAS::Abs","CAS/Abs.html#method-i-to_latex","()","<p>Returns the latex representation of the current Op\n"],["to_latex","CAS::Acos","CAS/Acos.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Asin","CAS/Asin.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Atan","CAS/Atan.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::BinaryOp","CAS/BinaryOp.html#method-i-to_latex","()","<p>Returns the latex representation of the current Op.\n<p>-&gt; `String`\n"],["to_latex","CAS::Constant","CAS/Constant.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Cos","CAS/Cos.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Diff","CAS/Diff.html#method-i-to_latex","()","<p>Returns a latex representation of the current Op\n"],["to_latex","CAS::Div","CAS/Div.html#method-i-to_latex","()","<p>Returns the latex reppresentation of the current Op\n"],["to_latex","CAS::E_CONSTANT","CAS/E_CONSTANT.html#method-i-to_latex","()",""],["to_latex","CAS::Equal","CAS/Equal.html#method-i-to_latex","()",""],["to_latex","CAS::Exp","CAS/Exp.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Greater","CAS/Greater.html#method-i-to_latex","()",""],["to_latex","CAS::GreaterEqual","CAS/GreaterEqual.html#method-i-to_latex","()",""],["to_latex","CAS::INFINITY_CONSTANT","CAS/INFINITY_CONSTANT.html#method-i-to_latex","()",""],["to_latex","CAS::Invert","CAS/Invert.html#method-i-to_latex","()","<p>Returns the latex representation of the current op\n"],["to_latex","CAS::Ln","CAS/Ln.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Op","CAS/Op.html#method-i-to_latex","()","<p>Returns the latex representation of the current Op.\n<p>-&gt; `String`\n"],["to_latex","CAS::PI_CONSTANT","CAS/PI_CONSTANT.html#method-i-to_latex","()",""],["to_latex","CAS::Piecewise","CAS/Piecewise.html#method-i-to_latex","()",""],["to_latex","CAS::Pow","CAS/Pow.html#method-i-to_latex","()","<p>Returns the latex representation of the op\n"],["to_latex","CAS::Prod","CAS/Prod.html#method-i-to_latex","()","<p>Returns a latex represstation of the Op\n"],["to_latex","CAS::Sin","CAS/Sin.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Smaller","CAS/Smaller.html#method-i-to_latex","()",""],["to_latex","CAS::SmallerEqual","CAS/SmallerEqual.html#method-i-to_latex","()",""],["to_latex","CAS::Sqrt","CAS/Sqrt.html#method-i-to_latex","()","<p>Returns the latex representation of the current Op\n"],["to_latex","CAS::Sum","CAS/Sum.html#method-i-to_latex","()","<p>Returns a latex represenntation of the current Op\n"],["to_latex","CAS::Tan","CAS/Tan.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_latex","CAS::Variable","CAS/Variable.html#method-i-to_latex","()","<p>Return latex representation of current Op\n"],["to_s","CAS::Abs","CAS/Abs.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Acos","CAS/Acos.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Asin","CAS/Asin.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Atan","CAS/Atan.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::BinaryOp","CAS/BinaryOp.html#method-i-to_s","()","<p>String representation of the tree\n<p>-&gt; `String`\n"],["to_s","CAS::Condition","CAS/Condition.html#method-i-to_s","()",""],["to_s","CAS::Constant","CAS/Constant.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Cos","CAS/Cos.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Diff","CAS/Diff.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Div","CAS/Div.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::E_CONSTANT","CAS/E_CONSTANT.html#method-i-to_s","()",""],["to_s","CAS::Exp","CAS/Exp.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::INFINITY_CONSTANT","CAS/INFINITY_CONSTANT.html#method-i-to_s","()",""],["to_s","CAS::Invert","CAS/Invert.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Ln","CAS/Ln.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::MINUS_ONE_CONSTANT","CAS/MINUS_ONE_CONSTANT.html#method-i-to_s","()",""],["to_s","CAS::ONE_CONSTANT","CAS/ONE_CONSTANT.html#method-i-to_s","()",""],["to_s","CAS::Op","CAS/Op.html#method-i-to_s","()","<p>Convert expression to string\n<p>-&gt; `String` to print on screen\n"],["to_s","CAS::PI_CONSTANT","CAS/PI_CONSTANT.html#method-i-to_s","()",""],["to_s","CAS::Piecewise","CAS/Piecewise.html#method-i-to_s","()",""],["to_s","CAS::Pow","CAS/Pow.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Prod","CAS/Prod.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Sin","CAS/Sin.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Sqrt","CAS/Sqrt.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Sum","CAS/Sum.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::TWO_CONSTANT","CAS/TWO_CONSTANT.html#method-i-to_s","()",""],["to_s","CAS::Tan","CAS/Tan.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::Variable","CAS/Variable.html#method-i-to_s","()","<p>Same as `CAS::Op`\n"],["to_s","CAS::ZERO_CONSTANT","CAS/ZERO_CONSTANT.html#method-i-to_s","()",""],["vars","CAS","CAS.html#method-c-vars","(*name)",""],["vars","SandBox","SandBox.html#method-i-vars","(args)",""],["CHANGELOG","","CHANGELOG.html","","<p>Version 0.1.0: The first release of the Gem, complete of all classes.\nVersion 0.1.2: Added `CAS::Op#to_code` …\n"],["README","","README_md.html","","<p>CAS-RB\n<p><img src=\"https://badge.fury.io/rb/ragni-cas.svg\">\n<p>Introduction\n"],["MatteoRagni.pem","","certs/MatteoRagni_pem.html","","<p>—–BEGIN CERTIFICATE—–\nMIIDXDCCAkSgAwIBAgIBATANBgkqhkiG9w0BAQUFADA6MQ0wCwYDVQQDDARpbmZv\nMRUwEwYKCZImiZPyLGQBGRYFcmFnbmkxEjAQBgoJkiaJk/IsZAEZFgJtZTAeFw0x …\n"],["ragni-cas.gemspec","","ragni-cas_gemspec.html","","<p>#!/usr/bin/env ruby\n<p>changelog = File.expand_path(&#39;CHANGELOG&#39;, File.dirname(__FILE__))\nchangelog …\n"]]}}